'''
===================================================================================================================================
문제
===================================================================================================================================
교점에 별 만들기 ☆☆
===================================================================================================================================
Log
===================================================================================================================================
2022-04-03 SUN : 문제 파악
                 테스트 2, 5, 6, 9~21 실패, 테스트 4, 7, 8, 22~26, 28 실패(런타임 에러) (13.8)
                 직선이 겹칠 때, 평행일 때 등 조건을 잘 확인해야할듯
                 테스트 2, 5, 6, 9~21 실패, 테스트 4, 7, 8, 22~26, 28 실패(런타임 에러) (13.8)
                 교점 구하는 방식을 문제의 참고 사항 방식으로 수정
                 -> 테스트 4, 7, 8, 22, 28 실패(런타임 에러) (82.8)
                 for문 내의 조건문 모두 삭제
                 문제 해결
===================================================================================================================================
'''

'''
Algorithm
1. 각 직선간의 교점 찾기
    -> 교점이 정수가 아니면 삭제
    -> 교점이 정수이면 답에 추가
2. 해당 교점에 별 찍기
    -> X좌표는 X좌표 최솟값 ~ X좌표 최댓값+1
    -> Y좌표는 Y좌표 최솟값 ~ Y좌표 최댓값+1
'''

# 두 직선의 교점을 찾는 함수
def find_intersection_point(a, b, c, d, e, f):

    # ad - bc의 값이 0인 경우 평행 또는 일치
    if a*d - b*c == 0:
        return (0.1, 0.1)
    
    return ((b*f-e*d) / (a*d - b*c), (e*c-a*f) / (a*d - b*c))

def solution(line):
    answer = []
    
    # 각 직선간의 교점 찾기
    intersection_points = []
    for x1, y1, z1 in line:
        for x2, y2, z2 in line:

            # 교점의 x좌표, y좌표 구하기
            x, y = find_intersection_point(x1, y1, x2, y2, z1, z2)

            # 교점이 정수인 경우에만 저장
            if x == int(x) and y == int(y) and (x, y) not in intersection_points:
                intersection_points.append((int(x), int(y)))

    # x좌표의 최소, 최대 구하기
    intersection_points.sort()
    x_min = intersection_points[0][0]
    x_max = intersection_points[-1][0]
    
    # y좌표의 최소, 최대 구하기
    intersection_points.sort(key = lambda x: x[1])
    y_min = intersection_points[0][1]
    y_max = intersection_points[-1][1]

    # 교점의 x좌표, y좌표의 최소 ~ 최대만큼 그리기
    for y in range(y_max, y_min-1, -1):
        temp = ''
        for x in range(x_min, x_max+1):
            if (x, y) not in intersection_points:
                temp += '.'
            else:
                temp += '*'
        answer.append(temp)

    return answer

print(solution([[2, -1, 4], [-2, -1, 4], [0, -1, 1], [5, -8, -12], [5, 8, 12]]))
print(solution([[0, 1, -1], [1, 0, -1], [1, 0, 1]]))
print(solution([[1, -1, 0], [2, -1, 0]]))
print(solution([[1, -1, 0], [2, -1, 0], [4, -1, 0]]))