'''
===================================================================================================================================
문제
===================================================================================================================================
짝지어 제거하기 ☆☆
===================================================================================================================================
문제 설명
===================================================================================================================================
' 짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다. 그다
  음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어붙입니다. 이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다. 문자열 S
  가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 반환하는 함수를 완성해 주세요. 성공적으로 수행할 수 있으며 1을, 아닐 경우
  0을 리턴해주면 됩니다.
  
' 예를 들어, 문자열 S = baabaa 라면
    b aa baa -> bb aa -> aa ->
  의 순서로 문자열을 모두 제거할 수 있으므로 1을 반환합니다.
===================================================================================================================================
제한 사항
===================================================================================================================================
' 문자열의 길이 : 1,000,000이하의 자연수
' 문자열은 모두 소문자로 이루어져 있습니다.
===================================================================================================================================
입출력 예
===================================================================================================================================
s	            result
"baabaa"        1
"cdcd"          0
===================================================================================================================================
입출력 예 설명
===================================================================================================================================
' 입출력 예 #1

    위의 예시와 같습니다.

' 입출력 예 #2

    문자열이 남아있지만 짝지어 제거할 수 있는 문자열이 더 이상 존재하지 않기 때문에 0을 반환합니다.
===================================================================================================================================
Log
===================================================================================================================================
2021-11-13-Sat : 문제 파악
                 정확성 테스트 3 ~ 8 실패 (시간 초과), 테스트 9 실패 (런타임 에러) (25.4점)
                 효율성 테스트 1 ~ 8 실패 (시간 초과) (0점)

                 앞뒤 원소 동일 유무 일일히 확인하는 방법에서 replace로 앞에서부터 한 쌍씩 없애는 방식 사용
                 정확성 테스트 3 ~ 8 실패 (시간 초과) (30.3점)
                 효율성 테스트 1 ~ 8 실패 (시간 초과) (0점)
                 
                 replace 앞에서 1개 아니라 전체 다 바꾸는 방법으로 바꿈
                 정확성 테스트 3 ~ 5 실패 (시간 초과), 테스트 6, 7 실패 (런타임 에러), 테스트 8 실패 (시간초과) (30.3점)
                 효율성 테스트 테스트 1, 3 ~ 8 실패 (시간 초과) (5.0 점)
                 
                 replace 이후 temp 문자열과 s 문자열을 비교하는 if문 조건 간소화
                 정확성 테스트 3 ~ 8 실패 (시간 초과) (30.3점)
                 효율성 테스트 테스트 1, 3 ~ 8 실패 (시간 초과) (5.0 점)
                 
                 replace 시간복잡도 찾아보니까 O(n^2)라는 말이 있음
                 -> 다른 방법을 찾아봐야될듯,,,
                 
                 replace 대신 현재 index, 다음 index 확인하는 방식 사용
                 정확성 테스트 3 ~ 5 실패, 9 실패 (런타임 에러), 10 실패 (35.3점)
                 효율성 테스트 테스트 1 실패 (런타임 에러), 2 ~ 8 실패 (시간 초과)
                 -> 중간에 index 꼬이는 문제 있어서 런타임 에러 뜨는 것 같으니 확인해보기
                 
                 코드를 좀 바꿨는데 개빡치네 점수 떨어짐...
===================================================================================================================================
'''

def solution(s):
    i = 0
    len_ = len(s)
    while True:
        # 현재 index와 다음 index의 문자가 같은지 비교
        if s[i] == s[i+1]:
            # 같으면 문자 삭제
            s = s[:i] + s[i+2:]
            i = -1
            len_ = len(s)
            # s의 원소가 존재하지 않으면 성공
            if len_ == 0:
                return 1
            # s의 원소가 1개만 남으면 실패
            elif len_ == 1:
                return 0
        else: # replace 전후 길이가 같은 경우
            if i >= len_ - 2:
                return 0
        i += 1

print(solution('baabaa')) # 1
print(solution('cdcd')) # 0
print(solution('aaa')) # 0
print(solution('aaaa')) # 1
print(solution('abaa')) # 0